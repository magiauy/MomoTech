generic:
  progress: "§aProgress"
  stored: "&fStored "
  stored_default: "&fStored NULL J"
item:
  quantitative_plugin:
    name: "&x§7§4§8§d§8§dQ&x§7§7§8§d§8§fu&x§7§a§8§d§9§2a&x§7§d§8§c§9§4n&x§8§0§8§c§9§7t&x§8§3§8§c§9§9i&x§8§6§8§c§9§ct&x§8§9§8§c§9§ea&x§8§c§8§c§a§1t&x§9§0§8§c§a§3i&x§9§3§8§c§a§6v&x§9§6§8§c§a§8e &x§9§9§8§c§a§bp&x§9§c§8§c§a§dl&x§9§f§8§c§b§0u&x§a§2§8§b§b§3g&x§a§5§8§b§b§5i&x§a§8§8§b§b§8n"
    lore:
      - "&6Just a material"
  rule_boots:
    name: "&7Rule Boots"
    lore:
      - ""
  emptyShell:
    lore:
      - "&fI don't understand why this is an important material!"
      - "§f§lNULL"
  digital_component:
    name: "&7Digital Component"
  bug:
    date:
      name: "§7§lB§k1§8U§f§l§k一§7G §e- §aDate"
    system:
      name: "§7§lB§k1§8U§f§l§k一§7G §e- §aSystem"
    decimal:
      name: "§7§lB§k1§8U§f§l§k——§7G §e- §aDecimal"
    operational_formula:
      name: "§7§lB§k1§8U§f§l§k——§7G §e- §aOperational Formula"
    positive_overload:
      name: "§7§lB§k1§8U§f§l§k——§7G §e- §aPositive Overload"
    negative_overload:
      name: "§7§lB§k1§8U§f§l§k——§7G §e- §aNegative Overload"
  stone_generator:
    name: "§eStone §fGenerator"
showing_as_recipe_item:
  id_card: "§eID Card"
  digital_component: "§e§lDigital Component"
  emptyShell: "§e§lNull"
  bug:
    date: "§e§lBUG - Date"
    system: "§e§lBUG - System"
    decimal: "§e§lBUG - Decimal"
    operational_formula: "§e§lBUG - Operational Formula"
    positive_overload: "§e§lBUG - Positive Overload"
    negative_overload: "§e§lBUG - Negative Overload"
  symbol: "&e&lSymbol"
  symbol_2: "&6Symbol"
description:
  symbol_generator: "&fCreate operators"
  symbol_generator_usage: "&7Randomly output an operator after inputting 'Null's, with varying probabilities for different operators"
  transporter: "&fInserting digital component into the machine to configure distance"
  cobblestone_store: "&fSimilar to chests, but providing 48 compartments of storage space"
  uncontrollable_empty_generator: "&fGenerate 48 'Uncontrollable Empty's each time"
  random_quantum_generator: "&fGet random quantum"
  random_quantum_generator_usage: "&7Each tick randomly appears in the machine's interaction slots and all other items in the interaction slots will be cleared"
  final_copier_usage: "Input entangled quantum to replicate any object in the interaction slots in the middle"
  ore_collector: "&fProduces triple compressed minerals automatically"
  ordinary_number_combinator: "&fPerform simple arithmetic operations using input expressions"
  none_generator: "&fMake NONE"
  none_generator_usage: "&7Requirement: All types and stacking amounts of items on the input slot are different"
  symbol_lore: "&7The basis for creating matter out of thin air"
  letter_constructor: "&fCreate symbols"
  letter_constructor_usage: "&7Need to input the original material α and β and place a 'Null' in the middle"
  increment_usage: "&fInput two numbers for simple addition operation"
  increment_bug: "&fWhen the input formula is invalid, output BUG - Operational Formula"
  increment_bug_1: "&fWhen the number of decimal places in the calculation result exceeds 4, output BUG - Decimal"
  increment_bug_2: "&fWhen the calculation result is equal to one percent of the number composed of today's date (such as 202407.29), output BUG - Date"
  increment_bug_3: "&fWhen the calculation result exceeds 16777216, output BUG - Positive Overload"
  increment_bug_4: "&fWhen the calculation result is less than -16777216, output BUG - Negative Overload"
  increment_bug_5: "&fRandomly appearing 'BUG - System', its probability and calculation results are closely related to the number of online players and server TPS"
  idputter: "&fAdd symbols to the ID card"
  idputter_usage_1: "&7Please ensure that the number of the ID card is 1"
  idputter_usage_2: "&7Insert ID card on the left and symbol on the right"
  id_card_lore_1: "&7Add symbol integration Slimefun ID in the &cID integrator"
  id_card_lore_2: "&7Legitimate IDs can be directly used to produce mucus items corresponding to the ID in the &fmanufacturing station"
  eternal_mining: "&fCreating Eternal Particles"
  eternal_mining_usage: "&7Input 'Null' to increase progress by 1, and the required progress will increase after the progress is completed"
  emptyShellGenerator_I: "&fGenerate 1 stack of 'null' shells each time"
  emptyShellGenerator_usage: "&fInput any items to generate 'null' shells"
  original_material_alpha: "&fMake the original material α"
  original_material_beta: "&fMake the original material β"
  original_material_alpha_requirement: "&fRequirement: The number of stacked items on each row of the input slot decreases monotonically"
  original_material_beta_requirement: "&fRequirement: The number of stacked items on each row of the input slot increases monotonically"
  generate_once_every_1_tick: "&fGenerate once every 1 tick"
  generate_once_every_1_tick_f: "&fGenerate once every 1 tick"
  final_cobblestone_generator_2: "&7Generate 48 stacks of cobblestones each time"
  final_ingot_generator_1: "&fAutomated ingot casting"
  final_ingot_generator_2: "&7Every 1 tick, all mineral powder in the input slots will be smelted"
  fixer_repair_item: "&fRepair item"
  fixer_usage: "&7Enter any durable item and restore 1 durability for every 1 tick"
  pumpkin_carver_1: "&fAutomated pumpkin carving"
  pumpkin_carver_2: "&7Carving all pumpkins in the input slot every 1 tick"
  rule_geo_1: "&7Mine geo resources every 1 tick, ignoring biomes and weights"
  rule_geo_2: "&fAny registered geo resource can be mined"
  possible_productions: "§fPossible productions"
  salt_generator: "&fRandomly generate 1-64 amounts of salt per tick"
  netherite_pickaxe_requirement: "§fMust input netherite pickaxes"
  shine_and_dark_constructor_1: "&7When the machine block Y is less than 0, there is a 1% probability of producing"
  shine_and_dark_constructor_2: "&71% produces when the machine block Y is greater than 256"
  rule_shine_and_dark_constructor_1: "&7When the machine block Y is less than 0, there is a 50% probability of producing"
  rule_shine_and_dark_constructor_2: "&750% produces when the machine block Y is greater than 256"
  symbol_obtain: "&fCan be obtained in the &bSymbol generator"
  supported_saplings: "§fSupported saplings"
  supported_plants: "§fSupported plants"
  digital_constructor: "§f&Create digital components"
  digital_constructor_method: "&7Input 0 to 10 integer digital components with equal probability after 'Null' input"
  creative_generator: "§fGenerate 1 product for every 1 tick"
  easy_generator: "§fGenerate the corresponding efficiency product of the machine for every 1 tick"
  emptyShell_drop: "§fDrops randomly when breaking blocks"
  rule_dust_generator_1: "§fMust input cobblestones"
  rule_dust_generator_2: "§7Every 1 tick consumes one stack of cobblestones to generate one stack of products"